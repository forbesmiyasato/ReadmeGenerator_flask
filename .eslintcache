[{"C:\\Users\\forbe\\OneDrive\\Desktop\\Projects\\react-firebase-authentication\\src\\App.js":"1","C:\\Users\\forbe\\OneDrive\\Desktop\\Projects\\react-firebase-authentication\\src\\firebaseConfig.js":"2","C:\\Users\\forbe\\OneDrive\\Desktop\\Projects\\react-firebase-authentication\\src\\index.js":"3","C:\\Users\\forbe\\OneDrive\\Desktop\\Projects\\react-firebase-authentication\\src\\components\\textForm.js":"4","C:\\Users\\forbe\\OneDrive\\Desktop\\Projects\\react-firebase-authentication\\src\\components\\markdown.js":"5","C:\\Users\\forbe\\OneDrive\\Desktop\\Projects\\react-firebase-authentication\\src\\components\\preview.js":"6","C:\\Users\\forbe\\OneDrive\\Desktop\\Projects\\react-firebase-authentication\\src\\components\\repoList.js":"7","C:\\Users\\forbe\\OneDrive\\Desktop\\Projects\\react-firebase-authentication\\src\\components\\modal.js":"8"},{"size":11284,"mtime":1607076968713,"results":"9","hashOfConfig":"10"},{"size":526,"mtime":1607055906176,"results":"11","hashOfConfig":"10"},{"size":193,"mtime":1607055531830,"results":"12","hashOfConfig":"10"},{"size":487,"mtime":1607062197863,"results":"13","hashOfConfig":"10"},{"size":700,"mtime":1607076674614,"results":"14","hashOfConfig":"10"},{"size":590,"mtime":1607076287867,"results":"15","hashOfConfig":"10"},{"size":701,"mtime":1607076186541,"results":"16","hashOfConfig":"10"},{"size":2151,"mtime":1607076648465,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"mhfani",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\forbe\\OneDrive\\Desktop\\Projects\\react-firebase-authentication\\src\\App.js",["35","36","37","38","39","40","41"],"import React, { useEffect, useState } from \"react\";\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport firebaseConfig from \"./firebaseConfig\";\nimport axios from \"axios\";\nimport TextForm from \"./components/textForm\";\nimport Form from \"react-bootstrap/Form\";\nimport Container from \"react-bootstrap/Container\";\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"./components/modal\";\nimport RepoList from \"./components/repoList\";\nimport { Download, CloudUpload, Eye } from \"react-bootstrap-icons\";\n\nconst App = () => {\n    const [user, setUser] = useState(null);\n    const [accessToken, setAccessToken] = useState(\"\");\n    const [markdown, setMarkdown] = useState(\"\");\n    const [title, setTitle] = useState(\"\");\n    const [description, setDescription] = useState(\"\");\n    const [intro, setIntro] = useState(\"\");\n    const [installation, setInstallation] = useState(\"\");\n    const [usage, setUsage] = useState(\"\");\n    const [contribute, setContribute] = useState(\"\");\n    const [acknowledgements, setAcknowledgements] = useState(\"\");\n    const [modalShow, setModalShow] = useState(false);\n    const [modalType, setModalType] = useState(\"\");\n    const [userRepoUrl, setUserRepoUrl] = useState(\"\");\n    const [repos, setRepos] = useState([]);\n\n    //initialize firebase\n    if (!firebase.apps.length) {\n        firebase.initializeApp(firebaseConfig);\n    }\n\n    //set up the provider for firebase authentication\n    var provider = new firebase.auth.GithubAuthProvider();\n    provider.addScope(\"repo\");\n\n    const signOut = () => {\n        firebase\n            .auth()\n            .signOut()\n            .then(function () {\n                window.location.reload();\n            })\n            .catch(function (error) {\n                // An error happened.\n            });\n    };\n\n    //Prevent the form from being submitted when user presses enter\n    const handleKeyDown = (event) => {\n        if (event.keyCode === 13) {\n            event.preventDefault();\n        }\n    };\n\n    //Methods to handle user data input\n    const handleTitleChange = (element) => {\n        setTitle(element.target.value);\n    };\n\n    const handleDescriptionChange = (element) => {\n        setDescription(element.target.value);\n    };\n\n    const handleIntroChange = (element) => {\n        setIntro(element.target.value);\n    };\n\n    const handleInstallationChange = (element) => {\n        setInstallation(element.target.value);\n    };\n\n    const handleUsageChange = (element) => {\n        setUsage(element.target.value);\n    };\n\n    const handleContributeChange = (element) => {\n        setContribute(element.target.value);\n    };\n\n    const handleAcknowledgementsChange = (element) => {\n        setAcknowledgements(element.target.value);\n    };\n\n    const handlePreviewClick = () => {\n        setModalShow(true);\n        setModalType(\"preview\");\n    };\n\n    const handleMarkdownClick = () => {\n        setModalShow(true);\n        setModalType(\"markdown\");\n    };\n\n    const HandleUploadToGitHubClicked = () => {\n        firebase\n            .auth()\n            .signInWithPopup(provider)\n            .then(async function (result) {\n                // This gives you a GitHub Access Token. You can use it to access the GitHub API.\n                var token = result.credential.accessToken;\n                setAccessToken(token);\n                // The signed-in user info.\n                var user = result.user;\n                setUser(user);\n                // Set state to be user authenticated\n                setUserRepoUrl(result.additionalUserInfo.profile.repos_url);\n            })\n            .catch(function (error) {\n                // Handle Errors here.\n                var errorCode = error.code;\n                var errorMessage = error.message;\n                // The email of the user's account used.\n                var email = error.email;\n                // The firebase.auth.AuthCredential type that was used.\n                var credential = error.credential;\n                // ...\n            });\n    };\n\n    const uploadReadMeToGithub = async (repoName) => {\n        console.log(\"TEST\" + repoName)\n        console.log(markdown)\n        try {\n            let response = await axios.get(\n                `https://api.github.com/repos/forbesmiyasato/${repoName}/contents/README.md`\n            );\n            let sha = response.data.sha;\n            console.log(response);\n            axios.put(\n                `https://api.github.com/repos/forbesmiyasato/${repoName}/contents/README.md`,\n                {\n                    message: \"Update README.md from Forbes's README Generator\",\n                    content: btoa(unescape(encodeURIComponent(markdown))),\n                    sha: sha,\n                },\n                {\n                    headers: {\n                        Authorization: `token ${accessToken}`,\n                        Accept: \"application/vnd.github.v3+json\",\n                    },\n                }\n            );\n        } catch (err) {\n            alert(err);\n        }\n    };\n\n    //Fetch user repo, whenever user repo url changes (happens once user is authenticated)\n    useEffect(() => {\n        // Fetch users repositories to display\n        const fetchUserRepo = async () => {\n            let response = await axios.get(userRepoUrl);\n\n            //Create a list with just the name and id attribute\n            let repos = [];\n\n            response.data.map(({ id, name }) => {\n                if (name) {\n                    let repo = {};\n                    repo[\"id\"] = id;\n                    repo[\"name\"] = name;\n                    repos.push(repo);\n                }\n            });\n\n            setRepos(repos);\n            setModalShow(true);\n            setModalType(\"github\");\n        };\n\n        if (userRepoUrl) {\n            fetchUserRepo();\n        }\n\n        return () => {\n            setUserRepoUrl('');\n        }\n    }, [userRepoUrl]);\n\n    useEffect(() => {\n        let markdown = `\n# ${title.trim()}\\n\n${description.trim()}\\n\n<br />\\n\n### Welcome to ${title.trim()}!\\n\n<hr>\\n\n${intro.trim()}\\n\n<br />\\n\\n\n### Get Started <g-emoji class=\"g-emoji\" alias=\"rocket\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f680.png\">ðŸš€</g-emoji>\\n\n<hr>\\n\n${installation.trim()}\\n\n<br />\\n\n### Usage <g-emoji class=\"g-emoji\" alias=\"gear\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/2699.png\">âš™</g-emoji>\\n\n<hr>\\n\n${usage.trim()}\\n\n<br />\\n\n### Contribute <g-emoji class=\"g-emoji\" alias=\"toolbox\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f9f0.png\">ðŸ§°</g-emoji>\\n\n<hr>\\n\n${contribute.trim()}\\n\n<br />\\n\n### Acknowledgements <g-emoji class=\"g-emoji\" alias=\"blue_heart\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f499.png\">ðŸ’™</g-emoji>\\n\n<hr>\\n\n${acknowledgements.trim()}\\n\n<br />`;\n\n        setMarkdown(markdown);\n    }, [\n        title,\n        description,\n        intro,\n        installation,\n        usage,\n        contribute,\n        acknowledgements,\n    ]);\n\n    return (\n        <div className=\"App\">\n            <Container>\n                <h1 className=\"App-header mt-3\">\n                    GitHub README Generator by Forbes Miyasato\n                </h1>\n\n                <Form onKeyDown={handleKeyDown}>\n                    <TextForm\n                        id=\"form-title\"\n                        label=\"Title\"\n                        type=\"text\"\n                        placeholder=\"Project name...\"\n                        text=\"All inputs are optional\"\n                        onChange={handleTitleChange}\n                    ></TextForm>\n                    <TextForm\n                        id=\"form-description\"\n                        label=\"Description\"\n                        as=\"textarea\"\n                        placeholder=\"Brief Description...\"\n                        onChange={handleDescriptionChange}\n                    ></TextForm>\n                    <TextForm\n                        id=\"form-intro\"\n                        label=\"Introduction\"\n                        as=\"textarea\"\n                        placeholder=\"Why did you create this project...\"\n                        onChange={handleIntroChange}\n                    ></TextForm>\n                    <TextForm\n                        id=\"form-installation \"\n                        label=\"Get Started\"\n                        placeholder=\"Installation instructions...\"\n                        as=\"textarea\"\n                        onChange={handleInstallationChange}\n                    ></TextForm>\n                    <TextForm\n                        id=\"form-usage\"\n                        label=\"Usage\"\n                        placeholder=\"Explain how to use this project...\"\n                        as=\"textarea\"\n                        onChange={handleUsageChange}\n                    ></TextForm>\n                    <TextForm\n                        id=\"form-contribute\"\n                        label=\"Contribute\"\n                        placeholder=\"Explain how people can contribute to this project...\"\n                        as=\"textarea\"\n                        onChange={handleContributeChange}\n                    ></TextForm>\n                    <TextForm\n                        id=\"form-acknowledgement\"\n                        label=\"Acknowledgements\"\n                        placeholder=\"Anybody you wish to thank for helping or collaborating with you on this project...\"\n                        as=\"textarea\"\n                        onChange={handleAcknowledgementsChange}\n                    ></TextForm>\n                </Form>\n                <Button\n                    variant=\"outline-primary mr-2\"\n                    onClick={handleMarkdownClick}\n                >\n                    <Download /> Get Markdown\n                </Button>\n                <Button\n                    variant=\"outline-success mr-2\"\n                    onClick={HandleUploadToGitHubClicked}\n                >\n                    <CloudUpload /> Upload To Github\n                </Button>\n                <Button variant=\"outline-info\" onClick={handlePreviewClick}>\n                    <Eye /> Preview\n                </Button>\n            </Container>\n            <Modal\n                show={modalShow}\n                onHide={() => setModalShow(false)}\n                markdown={markdown}\n                repos={repos}\n                type={modalType}\n                onRepoSelect={uploadReadMeToGithub}\n            />\n\n            {user ? <p>Hello, {user.displayName}</p> : <p>Please sign in.</p>}\n\n            {user ? (\n                <>\n                    <img\n                        src={user.photoURL}\n                        style={{\n                            width: \"200px\",\n                            height: \"200px\",\n                            borderRadius: \"50%\",\n                        }}\n                    />\n                    <br />\n\n                    <button onClick={signOut}>Sign out</button>\n                </>\n            ) : (\n                <button onClick={HandleUploadToGitHubClicked}>\n                    Sign in with Github\n                </button>\n            )}\n        </div>\n    );\n};\n\nexport default App;\n","C:\\Users\\forbe\\OneDrive\\Desktop\\Projects\\react-firebase-authentication\\src\\firebaseConfig.js",[],"C:\\Users\\forbe\\OneDrive\\Desktop\\Projects\\react-firebase-authentication\\src\\index.js",[],"C:\\Users\\forbe\\OneDrive\\Desktop\\Projects\\react-firebase-authentication\\src\\components\\textForm.js",[],"C:\\Users\\forbe\\OneDrive\\Desktop\\Projects\\react-firebase-authentication\\src\\components\\markdown.js",[],"C:\\Users\\forbe\\OneDrive\\Desktop\\Projects\\react-firebase-authentication\\src\\components\\preview.js",[],"C:\\Users\\forbe\\OneDrive\\Desktop\\Projects\\react-firebase-authentication\\src\\components\\repoList.js",[],"C:\\Users\\forbe\\OneDrive\\Desktop\\Projects\\react-firebase-authentication\\src\\components\\modal.js",[],{"ruleId":"42","severity":1,"message":"43","line":12,"column":8,"nodeType":"44","messageId":"45","endLine":12,"endColumn":16},{"ruleId":"42","severity":1,"message":"46","line":114,"column":21,"nodeType":"44","messageId":"45","endLine":114,"endColumn":30},{"ruleId":"42","severity":1,"message":"47","line":115,"column":21,"nodeType":"44","messageId":"45","endLine":115,"endColumn":33},{"ruleId":"42","severity":1,"message":"48","line":117,"column":21,"nodeType":"44","messageId":"45","endLine":117,"endColumn":26},{"ruleId":"42","severity":1,"message":"49","line":119,"column":21,"nodeType":"44","messageId":"45","endLine":119,"endColumn":31},{"ruleId":"50","severity":1,"message":"51","line":161,"column":46,"nodeType":"52","messageId":"53","endLine":161,"endColumn":48},{"ruleId":"54","severity":1,"message":"55","line":310,"column":21,"nodeType":"56","endLine":317,"endColumn":23},"no-unused-vars","'RepoList' is defined but never used.","Identifier","unusedVar","'errorCode' is assigned a value but never used.","'errorMessage' is assigned a value but never used.","'email' is assigned a value but never used.","'credential' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]